// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
          # blendSrc: src_alpha
          # blendDst: one_minus_src_alpha
          # blendSrcAlpha: src_alpha
          # blendDstAlpha: one_minus_src_alpha
}%


CCProgram vs %{
  #include <./chunks/vert>
}%     


CCProgram fs %{
  precision highp float;

  #include <legacy/output-standard>

  #include <./chunks/fxaa>

  in vec2 v_uv;
  
  uniform PostUBO {
    vec4 params1;
    vec4 params2;
  };
  #pragma rate inputTexture pass
  uniform sampler2D inputTexture;

  layout(location = 0) out vec4 fragColor;

  void main () {
    if (params1.z == 1.) {
      fragColor = texture(inputTexture, v_uv);
      // need blend one zero 
      // fragColor = vec4(vec3(0.5), 0.5);
      fragColor = packRGBE(fragColor.rgb);
      // fragColor = vec4(unpackRGBE(fragColor), 1.);
      // fragColor = vec4(fragColor.w);
      return;
    }
    
    if (params1.w == 1.) {
      fragColor = texture(inputTexture, v_uv);
      fragColor = CCFragOutput(fragColor);
    }
    else if (params2.x == 1.) {
      // todo: need after tonemapped
      mediump vec2 v_rgbNW;
      mediump vec2 v_rgbNE;
      mediump vec2 v_rgbSW;
      mediump vec2 v_rgbSE;
      mediump vec2 v_rgbM;

      vec2 resolution = params1.xy;
      vec2 fragCoord = v_uv * resolution;

      fxaaTexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
      fragColor = fxaa(inputTexture, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);
    }
    else {
      fragColor = texture(inputTexture, v_uv);
    }
  }
  
}%
        
