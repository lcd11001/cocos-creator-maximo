vec3 Reinhard(in vec3 hdr) {
  return hdr / (hdr + 1.0);
}
vec3 ReinhardInverse(in vec3 sdr) {
  return sdr / max(1.0 - sdr, 1e-5);
}

vec4 guassianBlurSampleTex(vec2 uv) {
  vec4 color = texture(bloomTexture, uv);
  color.rgb = Reinhard(color.rgb);
  return color;
}

vec4 guassianBlurSimple5(vec2 uv, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3333333333333333) * direction;
  color += guassianBlurSampleTex(uv) * 0.29411764705882354;
  color += guassianBlurSampleTex(uv + off1) * 0.35294117647058826;
  color += guassianBlurSampleTex(uv - off1) * 0.35294117647058826;
  color.rgb = ReinhardInverse(color.rgb);
  return color;
}
vec4 guassianBlurSimple9(vec2 uv, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3846153846) * direction;
  vec2 off2 = vec2(3.2307692308) * direction;
  color += guassianBlurSampleTex(uv) * 0.2270270270;
  color += guassianBlurSampleTex(uv + off1) * 0.3162162162;
  color += guassianBlurSampleTex(uv - off1) * 0.3162162162;
  color += guassianBlurSampleTex(uv + off2) * 0.0702702703;
  color += guassianBlurSampleTex(uv - off2) * 0.0702702703;
  color.rgb = ReinhardInverse(color.rgb);
  return color;
}
vec4 guassianBlurSimple13(vec2 uv, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.411764705882353) * direction;
  vec2 off2 = vec2(3.2941176470588234) * direction;
  vec2 off3 = vec2(5.176470588235294) * direction;
  color += guassianBlurSampleTex(uv) * 0.1964825501511404;
  color += guassianBlurSampleTex(uv + off1) * 0.2969069646728344;
  color += guassianBlurSampleTex(uv - off1) * 0.2969069646728344;
  color += guassianBlurSampleTex(uv + off2) * 0.09447039785044732;
  color += guassianBlurSampleTex(uv - off2) * 0.09447039785044732;
  color += guassianBlurSampleTex(uv + off3) * 0.010381362401148057;
  color += guassianBlurSampleTex(uv - off3) * 0.010381362401148057;
  color.rgb = ReinhardInverse(color.rgb);
  return color;
}

vec4 gaussianBlur (float sampleCount, vec2 uv, vec2 pixelOffset) {
  vec4 color;
  
  if (sampleCount <= 1.) {
    color = guassianBlurSampleTex(uv);
  }
  else {
    vec2 startUV = uv - pixelOffset * sampleCount / 2.;
    for (int x = 0; x < 5; x++) {
      for (int y = 0; y < 4; y++) {
        float fi = float(y + 4 * x);
        if (fi > sampleCount) {
          break;
        }

        vec4 weights = GaussianBlurWeights[x];
        float weight = weights[y];
        color += guassianBlurSampleTex(startUV + pixelOffset * fi) * weight;
      }
    }
  }

  return color;
}

vec4 SampleCatmullRom(sampler2D tex, in vec2 uv, in vec2 texelSize) {
  // Source: https://gist.github.com/TheRealMJP/c83b8c0f46b63f3a88a5986f4fa982b1
  // License: https://gist.github.com/TheRealMJP/bc503b0b87b643d3505d41eab8b332ae

  // We're going to sample a a 4x4 grid of texels surrounding the target UV coordinate. We'll do this by rounding
  // down the sample location to get the exact center of our "starting" texel. The starting texel will be at
  // location [1, 1] in the grid, where [0, 0] is the top left corner.
  vec2 samplePos = uv / texelSize;
  vec2 texPos1 = floor(samplePos - 0.5) + 0.5;

  // Compute the fractional offset from our starting texel to our original sample location, which we'll
  // feed into the Catmull-Rom spline function to get our filter weights.
  vec2 f = samplePos - texPos1;

  // Compute the Catmull-Rom weights using the fractional offset that we calculated earlier.
  // These equations are pre-expanded based on our knowledge of where the texels will be located,
  // which lets us avoid having to evaluate a piece-wise function.
  vec2 w0 = f * (-0.5 + f * (1.0 - 0.5 * f));
  vec2 w1 = 1.0 + f * f * (-2.5 + 1.5 * f);
  vec2 w2 = f * (0.5 + f * (2.0 - 1.5 * f));
  vec2 w3 = f * f * (-0.5 + 0.5 * f);

  // Work out weighting factors and sampling offsets that will let us use bilinear filtering to
  // simultaneously evaluate the middle 2 samples from the 4x4 grid.
  vec2 w12 = w1 + w2;
  vec2 offset12 = w2 / (w1 + w2);

  // Compute the final UV coordinates we'll use for sampling the texture
  vec2 texPos0 = texPos1 - 1.0;
  vec2 texPos3 = texPos1 + 2.0;
  vec2 texPos12 = texPos1 + offset12;

  texPos0 *= texelSize;
  texPos3 *= texelSize;
  texPos12 *= texelSize;

  vec4 result = vec4(0.0);

  result += texture(tex, vec2(texPos0.x, texPos0.y), 0.0) * w0.x * w0.y;
  result += texture(tex, vec2(texPos12.x, texPos0.y), 0.0) * w12.x * w0.y;
  result += texture(tex, vec2(texPos3.x, texPos0.y), 0.0) * w3.x * w0.y;

  result += texture(tex, vec2(texPos0.x, texPos12.y), 0.0) * w0.x * w12.y;
  result += texture(tex, vec2(texPos12.x, texPos12.y), 0.0) * w12.x * w12.y;
  result += texture(tex, vec2(texPos3.x, texPos12.y), 0.0) * w3.x * w12.y;

  result += texture(tex, vec2(texPos0.x, texPos3.y), 0.0) * w0.x * w3.y;
  result += texture(tex, vec2(texPos12.x, texPos3.y), 0.0) * w12.x * w3.y;
  result += texture(tex, vec2(texPos3.x, texPos3.y), 0.0) * w3.x * w3.y;

  return max(result, 0.0);
}
