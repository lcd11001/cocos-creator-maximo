// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: lighting-vs
      frag: lighting-fs
      pass: deferred-lighting
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
}%

CCProgram UBO %{
    #pragma rate CustomLightingUBO pass
    uniform CustomLightingUBO {
      vec4 light_cluster_BoundsMin;
      vec4 light_cluster_BoundsDelta;
      vec4 light_cluster_CellsDot;
      vec4 light_cluster_CellsMax;
      vec4 light_cluster_TextureSize;         
      vec4 light_cluster_InfoTextureInvSize;  
      vec4 light_cluster_CellsCountByBoundsSizeAndPixelsPerCell;

      vec4 light_ibl_posRange0;
      vec4 light_ibl_posRange1;
      vec4 light_ibl_posRange2;

      vec4 fog_Parameters;
      vec4 fog_Parameters2;
      vec4 fog_Parameters3;
      vec4 fog_ColorParameters;
    };
}%

CCProgram lighting-vs %{
  precision highp float;
  #include <input-standard>
  #include <builtin/uniforms/cc-global>

  #include <UBO>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCVertInput(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;
  
    v_uv = a_texCoord;
  }
}%

CCProgram lighting-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/shading-standard-base>
  // #include <legacy/shading-standard-additive>
  // #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1
  // #include <legacy/shading-cluster-additive>
  // #endif
  #include <legacy/output-standard>
  #include <legacy/fog-base>
  #include <common/math/octahedron-transform>
  #include <common/math/coordinates>

  // #pragma builtin(global)
  // layout(set = 0, binding = 5) uniform samplerCube cc_environment;

  in vec2 v_uv;

  #include <UBO>
  
  #pragma rate light_cluster_InfoTexture pass
  uniform sampler2D light_cluster_InfoTexture;
  #pragma rate light_cluster_Texture pass
  uniform sampler2D light_cluster_Texture;

  #pragma rate light_ibl_Texture0 pass
  uniform samplerCube light_ibl_Texture0;
  #pragma rate light_ibl_Texture1 pass
  uniform samplerCube light_ibl_Texture1;
  #pragma rate light_ibl_Texture2 pass
  uniform samplerCube light_ibl_Texture2;
  
  // #if CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT
  //   #pragma extension([GL_EXT_shader_framebuffer_fetch, __VERSION__ < 450, enable])
  //   #if __VERSION__ >= 450
  //     layout(binding = 0, input_attachment_index = 0) uniform subpassInput gbuffer_albedoMap;
  //     layout(binding = 1, input_attachment_index = 1) uniform subpassInput gbuffer_normalMap;
  //     layout(binding = 2, input_attachment_index = 2) uniform subpassInput gbuffer_emissiveMap;
  //     layout(binding = 3, input_attachment_index = 3) uniform subpassInput depth_stencil;
  //   #elif __VERSION__ >= 300
  //     layout(location = 0) inout vec4 gbuffer_albedoMap;
  //     layout(location = 1) inout vec4 gbuffer_normalMap;
  //     layout(location = 2) inout vec4 gbuffer_emissiveMap;
  //     layout(binding = 3) uniform sampler2D depth_stencil;
  //   #else
  //     layout(binding = 3) uniform sampler2D depth_stencil;
  //   #endif
  // #else
    #pragma rate gbuffer_albedoMap pass
    uniform sampler2D gbuffer_albedoMap;
    #pragma rate gbuffer_normalMap pass
    uniform sampler2D gbuffer_normalMap;
    #pragma rate gbuffer_emissiveMap pass
    uniform sampler2D gbuffer_emissiveMap;
    #pragma rate gbuffer_posMap pass
    uniform sampler2D gbuffer_posMap;
  // #endif


  // #if !CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT || __VERSION__ >= 450
    layout(location = 0) out vec4 fragColor0;
  // #endif

  #include <./chunks/lighting-cluster>
  #include <./chunks/lighting-ibl>
  #include <./chunks/height-fog>
  #include <./chunks/shading-base>

  vec4 screen2WS(vec3 coord) {
    vec3 ndc = vec3(
  	  2.0 * (coord.x - cc_viewPort.x) / cc_viewPort.z - 1.0,
      2.0 * (coord.y - cc_viewPort.y) / cc_viewPort.w - 1.0,
      #if __VERSION__ >= 450
      coord.z);
      #else
      2.0 * coord.z - 1.0);
      #endif
  
    return GetWorldPosFromNDCPosRH(ndc, cc_matProj, cc_matViewProjInv);
  }


  void main () {
    StandardSurface s;

    // #if CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT
    //   #if __VERSION__ >= 450
    //     vec4 albedoMap = subpassLoad(gbuffer_albedoMap);
    //     vec4 normalMap = subpassLoad(gbuffer_normalMap);
    //     vec4 emissiveMap = subpassLoad(gbuffer_emissiveMap);
    //     float depth = subpassLoad(depth_stencil).x;
    //   #elif __VERSION__ >= 300
    //     vec4 albedoMap = gbuffer_albedoMap;
    //     vec4 normalMap = gbuffer_normalMap;
    //     vec4 emissiveMap = gbuffer_emissiveMap;
    //     float depth = texture(depth_stencil, v_uv).x;
    //   #else
    //     vec4 albedoMap = gl_LastFragData[0];
    //     vec4 normalMap = gl_LastFragData[1];
    //     vec4 emissiveMap = gl_LastFragData[2];
    //     float depth = texture(depth_stencil, v_uv).x;
    //   #endif
    // #else
      vec4 albedoMap = texture(gbuffer_albedoMap,v_uv);
      vec4 normalMap = texture(gbuffer_normalMap,v_uv);
      vec4 emissiveMap = texture(gbuffer_emissiveMap,v_uv);
      vec3 position = texture(gbuffer_posMap, v_uv).xyz;
    // #endif

    s.albedo = albedoMap;
    s.position = position;
    s.roughness = normalMap.z;
    s.normal = oct_to_float32x3(normalMap.xy);
    s.specularIntensity = 0.5;
    s.metallic = normalMap.w;
    s.emissive = emissiveMap.xyz;
    s.occlusion = 1.;//emissiveMap.w;
    // fixme: default value is 0, and give black result
    float fogFactor;
    CC_TRANSFER_FOG_BASE(vec4(position, 1), fogFactor);

    vec4 shadowPos;
    CC_TRANSFER_SHADOW_BASE(vec4(position, 1), shadowPos);

    vec3 specular;
    float shadow;
    vec4 color = CCCustomShadingBase(s, shadowPos, specular, shadow);
    
    #if ENABLE_CLUSTER_LIGHTING
    color += lightingAdd(s, shadowPos) * shadow;
    #endif

    #if ENABLE_IBL
      color.rgb += lightingIbl(s, specular);
    #endif

    #if ENABLE_FOG
      vec4 fogColor = calculateHeightFog(position.xyz - cc_cameraPos.xyz);
      color.rgb = color.rgb * fogColor.a + fogColor.rgb;
    #endif

    #if CLEAR_LIGHTING
      color = vec4(0.);
    #endif

    #if DEBUG_ALBEDO
      color.rgb = vec3(s.albedo);
    #endif

    #if DEBUG_NORMAL
      color.rgb = vec3(s.normal);
    #endif

    // color.rgb = s.normal;
    // color.a = 1.;


    // #if CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT
    //   #if __VERSION__ >= 450
    //     fragColor = color;
    //   #elif __VERSION__ >= 300
    //     gbuffer_emissiveMap = color;
    //   #else
    //     gl_FragData[2] = color;
    //   #endif
    // #else
      fragColor0 = color;

    // #endif
  }
}%
