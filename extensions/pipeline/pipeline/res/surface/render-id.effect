// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: standard-vs
      frag: standard-fs
      properties: &props
        id:         { value: 0, target: params.x }
}%

CCProgram shared-ubos %{
  uniform Constants {
    vec4 params;
  };
}%

CCProgram standard-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <shared-ubos>


  void main () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram standard-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <shared-ubos>
  #include <legacy/fog-fs>
  #include <legacy/standard-surface-entry>

  #pragma define-meta CC_FORCE_FORWARD_SHADING

  float getID () {
    return params.x;
  }

  #if CC_FORWARD_ADD                                                           
    layout(location = 0) out vec4 fragColorX;                        
                                                                    
    void main () {  
      fragColorX = vec4(vec3(getID()), 1.);                          
    }                                                                


  #elif (CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_FORWARD)
                                                                    
    layout(location = 0) out vec4 fragColorX;                        
                                                                    
    void main () {                                                       
      fragColorX = vec4(vec3(getID()), 1.);
    }                                                                
                                                                    
  #elif CC_PIPELINE_TYPE == CC_PIPELINE_TYPE_DEFERRED                
                                                                    
    layout(location = 0) out vec4 fragColor0;                        
    layout(location = 1) out vec4 fragColor1;                        
    layout(location = 2) out vec4 fragColor2;
    layout(location = 3) out vec4 fragColor3;
                                                                    
    void main () {
      #if CC_FORCE_FORWARD_SHADING
        fragColor0 = vec4(vec3(getID()), 1.);
        return;
      #endif

      if (cc_fogBase.x == 0.) {       // forward
        fragColor0 = vec4(vec3(getID()), 1.);
      }
      else if (cc_fogBase.x == 1.) {  // deferred
        fragColor0 = vec4(vec3(getID()), 1.);
        fragColor1 = vec4(vec3(getID()), 1.);
        fragColor2 = vec4(vec3(getID()), 1.);
        fragColor3 = vec4(vec3(getID()), 1.);
      }

    }                                                                
                                                                    
  #endif  
}%
